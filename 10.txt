Relevant CO: Explore the concept of hashing and implement various hashing algorithms 
for message integrity

Objectives: (a) to understand working fundamental of MD5
 (b) to carry out Implementation of MD5 techniques


#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include <stdlib.h>

#define LEFTROTATE(x, c) (((x) << (c)) | ((x) >> (32 - (c))))

uint32_t A = 0x67452301;
uint32_t B = 0xefcdab89;
uint32_t C = 0x98badcfe;
uint32_t D = 0x10325476;

const uint32_t K[] = {
    0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee, 0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501,
    0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be, 0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,
    0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa, 0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,
    0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed, 0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,
    0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c, 0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,
    0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05, 0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,
    0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039, 0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,
    0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1, 0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391
};

const uint32_t S[] = {
    7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,
    5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20,
    4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23,
    6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21
};

void md5_pad(uint8_t *message, size_t length, uint8_t **padded_message, size_t *padded_length) {
    size_t padding = (56 - (length % 64)) % 64; // Always ensure padding brings to 56 bytes
    *padded_length = length + padding + 8;     // 8 bytes for message length in bits
    *padded_message = (uint8_t *)malloc(*padded_length);

    memcpy(*padded_message, message, length);
    (*padded_message)[length] = 0x80;          // Append 1 bit (10000000 in binary)
    memset(*padded_message + length + 1, 0, padding - 1);

    uint64_t bit_length = length * 8;
    memcpy(*padded_message + *padded_length - 8, &bit_length, 8);
}

void md5_process_chunk(uint8_t chunk[64]) {
    uint32_t a = A, b = B, c = C, d = D, f, g, temp;
    uint32_t M[16];

    for (int i = 0; i < 16; ++i) {
        M[i] = (chunk[i * 4]) | (chunk[i * 4 + 1] << 8) | (chunk[i * 4 + 2] << 16) | (chunk[i * 4 + 3] << 24);
    }

    for (int i = 0; i < 64; i++) {
        if (i < 16) {
            f = (b & c) | ((~b) & d);
            g = i;
        } else if (i < 32) {
            f = (d & b) | ((~d) & c);
            g = (5 * i + 1) % 16;
        } else if (i < 48) {
            f = b ^ c ^ d;
            g = (3 * i + 5) % 16;
        } else {
            f = c ^ (b | (~d));
            g = (7 * i) % 16;
        }
        temp = d;
        d = c;
        c = b;
        b = b + LEFTROTATE((a + f + K[i] + M[g]), S[i]);
        a = temp;
    }

    A += a;
    B += b;
    C += c;
    D += d;
}

void md5_hash(uint8_t *message, size_t length, uint8_t hash[16]) {
    uint8_t *padded_message;
    size_t padded_length;

    md5_pad(message, length, &padded_message, &padded_length);

    for (size_t i = 0; i < padded_length; i += 64) {
        md5_process_chunk(padded_message + i);
    }

    hash[0] = A;
    hash[1] = A >> 8;
    hash[2] = A >> 16;
    hash[3] = A >> 24;

    hash[4] = B;
    hash[5] = B >> 8;
    hash[6] = B >> 16;
    hash[7] = B >> 24;

    hash[8] = C;
    hash[9] = C >> 8;
    hash[10] = C >> 16;
    hash[11] = C >> 24;

    hash[12] = D;
    hash[13] = D >> 8;
    hash[14] = D >> 16;
    hash[15] = D >> 24;

    free(padded_message);
}

int main() {
    const char *message = "hello";
    uint8_t hash[16];

    md5_hash((uint8_t *)message, strlen(message), hash);

    printf("MD5 hash of '%s': ", message);
    for (int i = 0; i < 16; i++) {
        printf("%02x", hash[i]);
    }
    printf("\n");

    return 0;
}